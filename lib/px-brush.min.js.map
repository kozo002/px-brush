{"version":3,"file":"px-brush.min.js","sources":["../src/StampMaker.js","../src/PxBrush.js"],"sourcesContent":["const HexPattern = /^#?[0-9A-Fa-f]{1,2}[0-9A-Fa-f]{1,2}[0-9A-Fa-f]{1,2}$/\nconst RGBPattern = /^rgb\\((\\s+)?[0-9]{1,3},(\\s+)?[0-9]{1,3},(\\s+)?[0-9]{1,3}(\\s+)?\\)$/\n\nexport default class StampMaker {\n  constructor () {\n    this.canvases = {}\n  }\n\n  parseColor (color) {\n    const isHex = HexPattern.test(color)\n    const isRGB = RGBPattern.test(color)\n    if (!isHex && !isRGB) {\n      throw new Error('Color is not correct format. #123123 or rgb(123, 123, 123) format required.')\n    }\n    if (isHex) {\n      let c = color[0] === '#' ? color.slice(1) : color\n      c = c.length === 3\n        ? c.split('').reduce((acc, it) => [...acc, it, it], []).join('')\n        : c\n      const r = parseInt(c.slice(0, 2), 16)\n      const g = parseInt(c.slice(2, 4), 16)\n      const b = parseInt(c.slice(4, 6), 16)\n      return { r, g, b }\n    }\n    if (isRGB) {\n      let [r, g, b] = color\n        .replace(/rgb|\\s+|\\(|\\)/g, '')\n        .split(',')\n        .map(it => parseInt(it))\n      r = r > 255 ? 255 : r\n      g = g > 255 ? 255 : g\n      b = b > 255 ? 255 : b\n      return { r, g, b }\n    }\n  }\n\n  make ({ size, color }) {\n    try {\n      size = size * window.devicePixelRatio\n      const _color = this.parseColor(color)\n      const _strColor = JSON.stringify(_color)\n      this.canvases[_strColor] = this.canvases[_strColor] || {}\n\n      if (this.canvases[_strColor][size] != null) {\n        return this.canvases[_strColor][size]\n      }\n      const canvas = document.createElement('canvas')\n      size = size + (size % 2)\n      canvas.width = size\n      canvas.height = size\n\n      const context = canvas.getContext('2d')\n      const imageData = context.createImageData(size, size)\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        imageData.data[i] = 255\n        imageData.data[i + 1] = 255\n        imageData.data[i + 2] = 255\n        imageData.data[i + 3] = 0\n      }\n      this.plotCircle(size * 2, (size * 4) * (size / 2), size / 2, imageData, size, _color)\n      this.fillCircle(imageData, _color)\n      context.putImageData(imageData, 0, 0)\n      this.canvases[_strColor][size] = canvas\n      return canvas\n    } catch (err) {\n      console.error(err)\n    }\n  }\n\n  plotCircle (xm, ym, r, imageData, size, color) {\n    let x = -r\n    let y = 0\n    let err = 2 - 2 * r /* bottom left to top right */\n\n    do {\n      /*   I. Quadrant +x +y */\n      const i = xm - ((x + 1) * 4) + (ym + ((y - 1) * (size * 4)))\n      imageData.data[i + 0] = color.r\n      imageData.data[i + 1] = color.g\n      imageData.data[i + 2] = color.b\n      imageData.data[i + 3] = 255\n      /*  II. Quadrant -x +y */\n      const ii = xm - (y * (size * 4)) + (ym - ((x + 1) * 4))\n      imageData.data[ii + 0] = color.r\n      imageData.data[ii + 1] = color.g\n      imageData.data[ii + 2] = color.b\n      imageData.data[ii + 3] = 255\n      /* III. Quadrant -x -y */\n      const iii = (xm + (x * 4)) + (ym - (y * (size * 4)))\n      imageData.data[iii + 0] = color.r\n      imageData.data[iii + 1] = color.g\n      imageData.data[iii + 2] = color.b\n      imageData.data[iii + 3] = 255\n      /*  IV. Quadrant +x -y */\n      const iv = (xm + ((y - 1) * (size * 4))) + (ym + (x * 4))\n      imageData.data[iv + 0] = color.r\n      imageData.data[iv + 1] = color.g\n      imageData.data[iv + 2] = color.b\n      imageData.data[iv + 3] = 255\n      r = err\n      if (r <= y) {\n        err += ++y * 2 + 1 /* y step */\n      }\n      if (r > x || err > y) {\n        err += ++x * 2 + 1 /* x step */\n      }\n    } while (x < 0)\n  }\n\n  fillCircle (imageData, color) {\n    const cols = imageData.width * 4\n    for (let row = 1; row < imageData.height - 1; row += 1) {\n      let isHitColor = false\n      let isHitClear = false\n      let isEnded = false\n      for (let col = 0; col < cols; col += 4) {\n        const index = cols * row + col\n        const alpha = imageData.data[index + 3]\n        const isColor = alpha === 255\n        const isClear = alpha === 0\n        if (isColor && !isHitColor) {\n          isHitColor = true\n        } else if (isClear && isHitColor) {\n          isHitClear = true\n        } else if (isColor && isHitColor && isHitClear) {\n          isEnded = true\n        }\n        if (isHitColor && isHitClear && !isEnded) {\n          imageData.data[index] = color.r\n          imageData.data[index + 1] = color.g\n          imageData.data[index + 2] = color.b\n          imageData.data[index + 3] = 255\n        }\n      }\n    }\n  }\n}\n","import StampMaker from './StampMaker'\n\nexport default class PxBrush {\n  constructor (canvas) {\n    this.canvas = canvas\n    this.context = canvas.getContext('2d')\n    this.stampMaker = new StampMaker()\n    this.configPixelRatio()\n  }\n\n  get dpr () {\n    return window.devicePixelRatio || 1\n  }\n\n  configPixelRatio () {\n    const { width, height } = this.canvas\n    this.canvas.width = width * this.dpr\n    this.canvas.height = height * this.dpr\n    this.canvas.style.width = `${width}px`\n    this.canvas.style.height = `${height}px`\n    this.context.scale(this.dpr, this.dpr)\n    this.context.imageSmoothingEnabled = false\n  }\n\n  exportAsPNG (fileName) {\n    return new Promise(resolve => {\n      const resultCanvas = document.createElement('canvas')\n      const resultContext = resultCanvas.getContext('2d')\n      const { width, height } = this.canvas\n      const reducedWidth = width / this.dpr\n      const reducedHeight = height / this.dpr\n      resultCanvas.width = reducedWidth\n      resultCanvas.height = reducedHeight\n      resultContext.imageSmoothingEnabled = false\n      resultContext.drawImage(\n        this.canvas,\n        0, 0, width, height,\n        0, 0, reducedWidth, reducedHeight\n      )\n      resultCanvas.toBlob(blob => {\n        blob.lastModifedDate = new Date()\n        blob.name = fileName\n        resolve(blob)\n      })\n    })\n  }\n\n  distanceBetween (point1, point2) {\n    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2))\n  }\n\n  angleBetween (point1, point2) {\n    return Math.atan2(point2.x - point1.x, point2.y - point1.y)\n  }\n\n  draw ({ from, to, size, color }) {\n    this.context.globalCompositeOperation = 'source-over'\n    this.brush({ from, to, size, color })\n  }\n\n  erase ({ from, to, size }) {\n    this.context.globalCompositeOperation = 'destination-out'\n    this.brush({ from, to, size, color: '#000000' })\n  }\n\n  brush ({ from, to, size, color }) {\n    const halfSize = (size - (size % 2)) / 2\n    const stamp = this.stampMaker.make({ size, color })\n    if (from.x === to.x && from.y === to.y) {\n      const x = from.x - halfSize\n      const y = from.y - halfSize\n      this.context.drawImage(stamp, Math.round(x), Math.round(y), size, size)\n      return\n    }\n    const dist = this.distanceBetween(from, to)\n    const angle = this.angleBetween(from, to)\n    for (let i = 0; i < dist; i += 1) {\n      const x = from.x + (Math.sin(angle) * i) - halfSize\n      const y = from.y + (Math.cos(angle) * i) - halfSize\n      window.requestAnimationFrame(() => {\n        this.context.drawImage(stamp, Math.round(x), Math.round(y), size, size)\n      })\n    }\n  }\n}\n"],"names":["HexPattern","RGBPattern","StampMaker","this","canvases","parseColor","color","isHex","test","isRGB","Error","c","slice","length","split","reduce","acc","it","join","r","parseInt","g","b","replace","map","make","size","window","devicePixelRatio","_color","_strColor","JSON","stringify","canvas","document","createElement","width","height","context","getContext","imageData","createImageData","i","data","plotCircle","fillCircle","putImageData","err","console","error","xm","ym","x","y","ii","iii","iv","cols","row","isHitColor","isHitClear","isEnded","col","index","alpha","isColor","stampMaker","configPixelRatio","dpr","style","scale","imageSmoothingEnabled","exportAsPNG","fileName","Promise","resolve","resultCanvas","resultContext","_this","reducedWidth","reducedHeight","drawImage","toBlob","blob","lastModifedDate","Date","name","distanceBetween","point1","point2","Math","sqrt","pow","angleBetween","atan2","draw","from","to","globalCompositeOperation","brush","erase","halfSize","stamp","dist","angle","sin","cos","requestAnimationFrame","_this2","round"],"mappings":"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"}